----------------------------------------------------------
| ~~~Object Oriented Programming (27th September ,2022)~~~ |
----------------------------------------------------------

(*) #define : Is used to define constants (alternative to 'const' keyword) 

(*) volatile : this keyword tells the compiler that a variables value may be changed in ways it may not be defined in the program 

(*) Static(Storage Class) : Static variables have a property of preserving their value even after they are out of their scope! 

(*)  ++'' : Pre-Increment Operator --> To use the existing value & operate on it AND THEN increment it.

(*)	Generic Programming : *search*

\/ Class : Class is used to specify the form of an object. It combines data representation and methods for  manipulating the data into one neat package.

\/ Constructor :  A special function in class when a new object of the class is created.

\/ Inline Function : The compiler tries to expand the code in the body of the function in place of a call to the function ie. it creates a copy of the desired function in the compiler which reduces the compile time drastically for a particular function.

\/ Return Type  : It is the data type the function will return. Some functions perform their operations but dont return any value, here the return type is 'void'

# Function Overloading : A function can have mutiple definitions for the same function name in the same scope. You can't overload a function declaration that differ only by return type.

# Operator Overloading : An operator can be over-loaded or redefined. Programmer  can use operator with user-defined data types.
						


--------------------------------------------------

Class Program for printing the Complex number given by the user : 


class Complex 
{
	float real, imag;
public:
	void getval(float p, float q )
	{
		real = p;
		imag = q;
	}
	void show();
	
};

void Complex::show() 
{
	cout << real << "+" << imag << " j" << endl;
}

int main() 
{
	Complex c1, c2;
	c1.getval(2, 3);
	c2.getval(5, 7);
	c1.show();
	c2.show();
}
-----------------------------------
ADDITION OF 2 COMPLEX NUMBERS 

#include <iostream>
using namespace std;

class complexNum 
{
public:
	double real, imag;
	complexNum() 
	{

	}
	complexNum(double r, double i) 
	{
		real = r;
		imag = i;
	}
	complexNum Add(complexNum);

	void show(void);
	void get(void);
};

void complexNum::show() 
{
	cout << "YOU'RE COMPLEX NUMBER IS : " << real << "+" << "i" << imag << endl;
}

void complexNum::get() 
{
	cout << " ENTER THE REAL PART : " << endl;
	cin >> real;
	cout << "ENTER THE IMAGINARY : " << endl;
	cin >> imag;
}

complexNum complexNum::Add(complexNum C) 
{
	real += C.real;
	imag += C.imag;
	return(complexNum(real, imag));
}

int main() 
{
	complexNum c1, c2, c3;
	c1.get();
	c2.get();

	c3 = c1.Add(c2);

	c3.show();
	
	return 0;
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

----------------------------------------------------------
| ~~~Object Oriented Programming (3rd October,2022)~~~ |
----------------------------------------------------------

\/ Access Specifiers : PUBLIC, PRIVATE,PROTRCTED

\/  Protected (Access Specifier) *IMP* : For the current class members the values given for 'Proteected' are 'Private' but when making a new class the previous vlaues can be INHERITED.

#include <iostream>
using namespace std;


~PROGRAM TO DISPLAY  ROLL NUMBER AND CGPA OF 2 STUDENTS - STUD1,STUD2~


class AA 
{
	int rollNo;
	float cgpa;
public:

	void setData(int x,float y);
	void getData();
	void displayData() 
	{
		cout << rollNo << cgpa << endl;
	}
};

 AA ::  setData(int x, float y) 
{
	rollNo = x;
	cgpa = y;
}
 AA :: getData() 
{
	cout << " ENTER THE ROLL NO & CGPA : ";
	cin >> rollNo >> cgpa;
}
int main() 
{
	AA Stud1, Stud2;

	Stud1.getData(1,9);
	Stud2.setData(2,7);
	Stud1.displayData();
	Stud2.displayData();

	return 0;
}

~~~~~~~~~~~~

(Q.) Design a class - Box, with 3 public data members , 4th  memeber is static named - Count. Make a function called - SetVal, another function of doulbe called - Volume.
Create 2 or 3 objects and show volume of all objecs and showcase the staus of number  of each box 

#include <iostream>
using namespace std;

class Box 
{
	int l, b, h;
	static int count;
public : 
	void SetVal(int p, int q, int r) 
	{
		l = p, b = q, h = r;
		count++;
	}
	double volume(vol) 
	{
		return (l * b * h);
	}
};

 static  Box:: count();
int main() 
{
	Box b1, b2;

	b1.SetVal(4, 6, 8);
	cout << "VOLUME OF BOX 1 : " << b1.volume << endl;
	cout << Box :: count;

	b2.SetVal(5, 2, 6);
	cout << "VOLUME OF BOX 1 : " << b2.volume << endl;
	cout << Box :: count;

	return 0;
	system("pause>0");

}
---------------------
(Q.) DESIGN A CLASS - BOX WITH PROVATE DATA MEMEBER L,B,H(DOUBLE DATA TYPE) & IN PUBLIC SECTION THERE IS STATIC VARIABLE COUNT AND 3 ARGUMENT CONSTRUCTOR WITH DEFAULT VALUE(2.0)FOR EACH.
ALSO INCLUDES A FUNCTION VOLUME(DOUBLE - RETURN TYPE), STATIC COUNT VARIABLE (TO RETURN COUNT OF BOXES).

#include <iostream>
using namespace std;

class Box  
{
	double l, b, h;
public:
	static int count;
	Box(double x=2.0, double y=2.0, double z=2.0 )
	{
		l = x, b = y, h = z;
		count++;
	}
	double Volume() 
	{
		return (l * b * h);
	}
	static int getCountVal() 
	{
		return count;
	}
};



int main() 
{
	cout << " COUNT OF THE BOXES IS : " << Box::count;

	Box b1, b2(5, 6, 7), b3(2, 3, 4);

	cout << " ENTER L-B-H OF THE BOX  : " << endl;
	cout << Box::getCountVal;

return 0;
}

----------
(Q.)DESIGN CLASS - COMPLEX, IN PUBLIC THERE 0 ARG CONST, 2 ARG CONSTR.WRITE A FUNCTION TO ADD 2 COMPLEX NUMBERS 

#include <iostream>
using namespace std;


Complex complex::Add(complex C) 
{
	return(complex(real+C.))
}

class Complex 
{
	double real, imag;

public:
	Complex() 
	{
		cout << "0 Argument Constructor Invokes (Implicitly)";
	}
	Complex(double p, double q) 
	{
		real = p;
		imag = q;
		cout << "THE ZERO ARGUMENT CALLED ";
	}
	~Complex()
	{
		cout << "OBJECT DESTRUCTOR";
	}

	void display() 
	{
		cout << "REAL PART IS " << real << endl;
		cout << "IMAGEBARY PART IS " << imag << endl;
	}
	Complex Add(complex) 
};

int main() 
{
	Complex c1, c2(1.1,2.2), c3;
	c1 = Complex(3.3, 2.2);

	c1.display();
	c2.display();
	c3.display();
	
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

----------------------------------------------------------
| ~~~Object Oriented Programming (4th October,2022)~~~ |
----------------------------------------------------------



\/ Simple Inheritance : A -> B

\/ Multi-Level Inheritance : A -> B -> C

\/ Mutiple Inheritance : A -> }
						      |----> C
   					     B -> }

(Q.) USING INHERITANCE CALCULATE THE AREA OF A TRIAGNLE FROM THE BASE CLASE WHICH HAS THE FUNCTIONS OFR TAKING INPIT(B,H) AND CALCULATING THE AREA.


class Shape 
{
protected:
	int base, height;
public:
	void getch();
	virtual void show();
};

void Shape::getch() 
{
	cout << "ENTER BASE AND HEIGHT OF THE SHAPE : " << endl;
	cin >> base >> height;
}

void Shape::show() 
{
	cout << "BASE = " << base << ",HEIGHT = " << height << endl;
}


class Triangle : public Shape
{
public:
	void area();
};

void Triangle::area() 
{
	cout << "AREA OF TRIANGLE IS : " << (base * height) * 0.5;
}
int main()
{
	Triangle T;
	Shape R;
	T.getch();
	T.area();

	cout << endl;
	cout << endl;
	  

	R.getch();
	R.show();

	return 0;

	system("pause>0");
}

------------

(Q.) USING INHERITANCE MAKE A SUB CLASS AND PRINT A VALUE ASSIGNED TO THE OBJECT OF THE ORIGINAL CLASS 

#include <iostream>
using namespace std;

class Box 
{
protected:
	double width;
};

class smallBox : Box
{
public:
	void setSmallWidth(double wid);
	double getSmallWidth(void);
};

double smallBox::getSmall5Width(void) 
{
	return width;
}

void smallBox::setSmallWidth(double wid) 
{
	width = wid;
}

int main() 
{
	smallBox box;

	box.setSmallWidth(5.0);
	cout << "WIDTH OF THE BOX IS : " << box.getSmallWidth() << endl;

	return 0;
}
-----------------
(Q.) USING A PARAMTERIZED CONSTRUCTOR GIVE SOME PARAMETERS IN AN EXISTING CONSTRUCTOR AND DISPLAY MESSAGE AKNOWLEDGING THE CREATION OF THE OBJECT 

#include <iostream>
using namespace std;

class Line 
{
public :
	void set_length(double len);
	double get_length(void);
	Line(double len);

private:
	double length;
};

Line::Line(double len) 
{
	cout << "OBJECTS IS BEING CREATED , LENGTH IS : " << len << endl;
	length = len;
}

void Line::set_length(double len) 
{
	length = len;
}

double Line::get_length(void) 
{
	return length;
}

int main() 
{
	Line line(10.0);
	cout << "LENGTH OF THE LINE IS : " << line.get_length() << endl;

	line.set_length(13.0);
	cout << "LENGTH OF LINE : " << line.get_length() << endl;

	return 0;
}

--------------------------

\/ Friend Funvtion : A friend function of a class is defined outside the class' scope but it has the power to access all private and protected memebers of the class.Even though the friend function may appear in the class defintion it is not a member function.

#include<iostream>
using namespace std;

class Box 
{
	double width;
public:
	double length;
	friend void display_width(Box buxa);
	void set_width(double wid);
};

void Box::set_width(double wid) 
{
	width = wid;
}

void display_width(Box buxa) 
{
	cout << "WIDTH OF THE BOX IS : " << buxa.width << endl;
}

int main() 
{
	Box buxa;

	buxa.set_width(13.0);
	display_width(buxa);

	return 0;
}
---------------------------

Inline Functions : It is s powerful concept that is commonly used with classes. If a function is inline - the compiler places it's copy with itself which when called drastically to call that function.



----------------------------------------------------------------------

//#include <stdio.h>
//#include<conio.h>
//
//
//struct Node 
//{
//	int data;
//	struct Node* next;
//
//};
//struct Node* head;
//
//void beginInsert();
//void lastInser();
//void randomInsert();
//void beginDel();
//void last_Del();
//void rand_Del();
//void traverse();
//void search();
//void exit();
//
//void main_bruh()
//{
//	while
//	{
//
//	
//		int choice = 0;
//
//		printf("\n\n***** MAIN MENU *****");
//		printf("\nCHOSE AN OPTION FROM THE LIST : \n");
//		printf("\n-----------------------------------------------------\n");
//	
//		printf("\n(1.)INSERT AT THE BEGINNING\n(2.)INSERT AT THE END\n(3.)INSERT AT RANDOM LOCATION\n(4.)DELETE FROM THE BEGGINNING\n(5.)DELETE FROM THE END\n(6.)DELETE NODE AT A SPECIFIC LOCATION\n(7.)SEARCH\n(8.)DISPLAY THE LINKED LIST\n(9.)EXIT");
//
//		printf("\n ENTER YOURE CHOICE :");
//		scanf_s("\n%d", &choice);
//
//		switch (choice)
//		{
//		case 1:
//			beginInsert();
//			break;
//		case 2:
//			lastInser();
//			break;
//			break;
//		case 3:
//			randomInsert();
//			break;
//		case 4:
//			beginDel();
//			break;
//		case 5:
//			last_Del();
//			break;
//		case 6:
//			rand_Del();
//			break;
//		case 7:
//			search();
//			break;
//		case 8:
//			traverse();
//			break;
//		case 9:
//			exit(0);
//			break;
//			default;
//
//			printf("PLEASE ENTER VALID CHOICE !!!");
//		}	
//	}
//}
//
//// WRITING THE FUNCTIONS FOR THE CHOICES 
//
//void beginInsert() 
//{
//
//}

























